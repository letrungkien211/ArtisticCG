#include <GL/glut.h>

const GLfloat lightpos[4] = {0.0, 3.0, 5.0, 1.0}; //照明の座標＋反射率（基本１でok）
const GLfloat red[4] = {1.0, 0.0, 0.0, 1.0};

float timestep = 0.000001;

float ballr = 0.15;
float ballm = 5.0;

float ballx = 0.0;
float bally = 0.0;
float ballz = 2.0;

float ballvx = 0.0;
float ballvy = 0.0;
float ballvz = 0.0;



void myDisplay(){

  //---色情報をクリア
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  
  //---投影方法に関する設定の開始
  glMatrixMode(GL_PROJECTION);
  
  glLoadIdentity();
  
  //glOrtho(-1, 1, -1, 1, -1, 1);
  gluPerspective(60.0, 1.0, 0.0001, 20);	//透視投影法によるレンダリング 3つめのパラメータを0にしない
  
  
  //---実際の描画に関する記述モードの開始
  glMatrixMode(GL_MODELVIEW);
  
  static double rotF = 0;
  rotF < 360 ? rotF += 0.2 : rotF = 0;//回転角の計算
  
  //glColor3f(1.0, 1.0, 0);
  
  ballvz = ballvz - timestep * 9.8;

  ballx += ballvx;
  bally += ballvy;
  ballz += ballvz; 

  if(ballz-ballr < 0){
      ballz = ballr;
      ballvz = -ballvz * 0.9;  
  }
  
  //---ティーポットの描画
  glPushMatrix();
  
  glTranslated(ballx,bally,ballz);		//ティーポットの移動
  //glScalef(0.5, 0.5, 0.5);	//ティーポットの拡大縮小
  //glRotatef(rotF, 1, 1, 0);	//ティーポットの回転
  //glutWireTeapot(1);			//半径1のティーポットをシーンに生成
  glutSolidSphere(0.3, 20,20);
  glPopMatrix();
  
	//地面の描画
  glPushMatrix();
  glTranslated(0, 0, -2.5);
  glutSolidCube(5.0);
  glPopMatrix();
  
  //---バッファの更新
  glutSwapBuffers();
}


void myIdle(){
  glutPostRedisplay();			//再描画命令
}

void init(){
  gluLookAt(2,3,4,0,0,0,0,0,1);//カメラの設定
  
  //光源
  glEnable(GL_LIGHTING);  //照明をonにするという合図
  glEnable(GL_LIGHT0);  //照明は８個までつけられて、その１つ目をonにする合図
  glLightfv(GL_LIGHT0, GL_DIFFUSE, red);
  glLightfv(GL_LIGHT0, GL_POSITION, lightpos);
  
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_CULL_FACE);
  glCullFace(GL_BACK);
  
}

int main(int argc, char* argv[])
{

  //---GLUTの初期化
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH); 
  glutInitWindowSize(512, 512);		//ウィンドウサイズの設定
  glutCreateWindow("ARTISTIC CG");	//ウィンドウの生成
  
  
  //---GLUTへの関数の登録
  glutDisplayFunc(myDisplay);			//Display関数の登録
  glutIdleFunc(myIdle);				//Idle関数の登録
  
  init();
  
  //---ループの開始
  glutMainLoop();
  
  return 0;
}
